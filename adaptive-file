//Adaptivehufman

package dsa_using_java;
import java.util.*;

public class AdaptiveHuffmancoding {
	public static void main(String[] args) 
	{
	Scanner sc = new Scanner(System.in);
	System.out.println("Enter your string: ");
	String firststr = sc.next();
	System.out.println(Compress(firststr));
	System.out.println(Decompress(Compress(firststr))); 
	}
	public static String Compress(String S) 
	{
	Tree comp = new Tree(); 
	String out = "";
	for (int i = 0; i < S.length(); ++i) 
	{
		out =  comp.InsertSymbol(S.charAt(i), out);
	} 
	return out; 
	}
	public static String Decompress(String S) 
	{
	String out = ""; 
	Tree decom = new Tree(); 
	String x = "";
	char symbol = decom.ShortCodeKey(S.substring(0, 8));
	x = decom.InsertSymbol(symbol, x);
	out += symbol;
	int i = 8;
	Boolean flag = false;
	while (!flag) 
	{
	if (S.length() - i >=decom.NYT.code.length()) 
	{
		x = S.substring(i, i + decom.NYT.code.length()); 
		i += decom.NYT.code.length();
		} 
		else { x = S.substring(i); i += x.length(); 
		}
		if (decom.NYT.code.matches(x)) 
		{
		String Shortcode = S.substring(i, i + 8); 
		i += 8;
		symbol = decom.ShortCodeKey(Shortcode); 
		out += symbol;
		x = decom.InsertSymbol(symbol, x);
		} else {
		while (true) {
			symbol = decom.getcharfromcode(x);
			if (symbol != ' ') {
				x = decom.InsertSymbol(symbol, x);
				out += symbol;
				break;
		} 
			else { i--; x = x.substring(0, x.length() - 1); } }
		} 	
		if (i == S.length()) {flag = true;} }
		return out; 
		}
		}

//Node:-

package dsa_using_java;

public class Node {
	 public Node parent = null; 
	 public Node left = null; 
	 public Node right = null;
	 public char symbol;
	 public String code;
	 public int number;
	 public int count;
	 public Node(Node parent, Node left, Node right, char symbol, String code, 
int Number, int count) {
	 this.parent = parent;
	 this.left = left;
	 this.right = right;
	 this.symbol = symbol;
	 this.code = code;
	 this.number = Number;
	 this.count = count;
 }
	 public Node(Node parent) 
{
 this.parent = parent;
 }
	 public void setSymbol(char symbol) 
{
 this.symbol = symbol;
 }

	 public void setCode(String code) 
{
 this.code = code; 
}
	  public void setNumber(int number)
 	{
 	this.number = number;
 }
	  public void setCount(int count) 
{
 this.count = count; 
}

}

//Tree:-

package dsa_using_java;
import java.util.*;

public class Tree {
	public HashMap<Character,String> dic = new HashMap<Character, String>();
	public HashMap<Character,Node> content = new HashMap<Character,Node>();
	public Node root,NYT;
	public Tree()
	{ 
		root = new Node(null,null,null,' ',"-1",100,0);
	NYT=root;
	for ( int i = 0 ; i < 128 ; i++)
	{ String code=Integer.toBinaryString(i);
	while(code.length()<8) 
	code='0'+code;
	dic.put( ((char)i ) ,code); 
	} }
	public String InsertSymbol(char symbol ,String out) 
	{
	if (content.isEmpty())
	{ out += dic.get(symbol);
	root.right = new Node(root ,null,null,symbol,"1",NYT.number - 1,1);
	content.put(symbol,NYT.right);
	root.left = new Node(root ,null,null,' ',"0",NYT.number - 2,0);
	root.count = 1; NYT = root.left;
	 }
	else if ( content.containsKey(symbol) ) {
	Node SNode = content.get(symbol);
	out += SNode.code;
	SNode.setCount(SNode.count + 1);
	UpdateInsert(SNode); 
	}
	else { out = out + NYT.code + dic.get(symbol);
	NYT.right = new Node(NYT ,null ,null ,symbol ,NYT.code+"1" ,NYT.number - 1 ,1);
	content.put(symbol,NYT.right);
	NYT.left = new Node(NYT ,null ,null ,' ' ,NYT.code+"0" ,NYT.number - 2 ,0);
	NYT = NYT.left; UpdateInsert(NYT.parent.right);
	} 
	return out; }
	public void UpdateInsert(Node cur)
	{ Node r = root;Boolean alg1 = false; Increment();
	while( !(r.right == cur || r.left == cur) ) {
	if(r.right.symbol != ' '){
	if(r.right.number > cur.number && cur.count > r.right.count)

	{ 
	alg1=true;
	char temp0 = cur.symbol; cur.symbol = r.right.symbol;
	r.right.symbol = temp0;
	Integer temp2 = cur.count; cur.count = r.right.count;
	r.right.count = temp2;
	content.put(r.right.symbol,r.right);
	content.put(cur.symbol,cur);
	Increment();
	break; }
	 r = r.left; 
	}
	else if(r.left.symbol != ' ')
	{
	if(r.left.number > cur.number && cur.count > r.left.count){
	alg1=true;
	char temp0 = cur.symbol;
	cur.symbol = r.left.symbol;
	r.left.symbol = temp0;
	Integer temp2 = cur.count;
	cur.count = r.left.count;
	r.left.count = temp2;
	content.put(r.left.symbol,r.left);
	content.put(cur.symbol,cur);
	Increment();
	break;
	}
	 r = r.right;
	 } }
	if (alg1) return;
	while(cur != root)
	{
	if(cur.parent.left.count > cur.parent.right.count )
	 {
	Node temp = cur.parent.left;
	cur.parent.left = cur.parent.right; cur.parent.right = temp;
	Integer temp1 = cur.parent.left.number;
	cur.parent.left.number = cur.parent.right.number; cur.parent.right.number = temp1;
	String temp3 = cur.parent.left.code;
	cur.parent.left.code = cur.parent.right.code; cur.parent.right.code = temp3;
	FixCode(cur);
	return; 
	} 
	cur = cur.parent; 
	}
	} 
	public void Increment()

	{
	 Node r = NYT;
	while ( !(r == root ) ) 
	{
	r.parent.count = r.parent.left.count + r.parent.right.count;
	r = r.parent;
	 } }
	public void FixCode(Node cur)
	{
	if(cur.parent.right.symbol == ' ') 
	cur = cur.parent.right;
	else cur = cur.parent.left;
	while ( cur != NYT ) 
	{
	cur.right.code = cur.code + cur.right.code.substring(cur.right.code.length()-1);
	cur.left.code = cur.code + cur.left.code.substring(cur.left.code.length()-1);
	cur = cur.left;
	if(cur.parent.right.symbol == ' ')
	 cur = cur.parent.right;
	else cur = cur.parent.left; } }
	public void PrintNode(Node P){
	System.out.println(P.symbol); System.out.println(P.code);
	System.out.println(P.number); System.out.println(P.count);
	} 
	public void PrintTree(){
	Node P = root;
	PrintNode(P); System.out.println();
	while(P != NYT){
	PrintNode(P.right); System.out.println();
	PrintNode(P.left); System.out.println();
	if(P.right.symbol == ' ') P = P.right;
	else P = P.left; 
	} }
	public char ShortCodeKey (String shortcode)
	{
	for (char i : dic.keySet()) 
	{if 
	(dic.get(i).matches(shortcode)) return i;} return ' '; }
	public char getcharfromcode (String code){
	for (char i : content.keySet()) {if (content.get(i).code.matches(code)) return i;}
	return ' ';
	 }

}


